# name: Build and Push Static Files

# on:
#   push:
#     branches: [ "testing","rentsafe","rentsafe-dev","rentsafe-staging", "rentsafe-testing" ]

# jobs:
#   build-and-push-static:
#     runs-on: ubuntu-latest

#     env:
#       SECRET_KEY: ${{ secrets.SECRET_KEY }}
#       EMAIL_BACKEND: ${{ secrets.EMAIL_BACKEND }}
#       EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
#       EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
#       EMAIL_USE_SSL: ${{ secrets.EMAIL_USE_SSL }}
#       EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
#       EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
#       SMS_USERNAME: ${{ secrets.SMS_USERNAME }}
#       SMS_PASSWORD: ${{ secrets.SMS_PASSWORD }}
#       SMS_API_KEY: ${{ secrets.SMS_API_KEY }}
#       ACCOUNT_SID: ${{ secrets.ACCOUNT_SID }}
#       AUTH_TOKEN: ${{ secrets.AUTH_TOKEN }}
#       WHATSAPP_API_MEDIA_URL: ${{ secrets.WHATSAPP_API_MEDIA_URL }}
#       WHATSAPP_API_URL: ${{ secrets.WHATSAPP_API_URL }}
#       WHATSAPP_ACCESS_TOKEN: ${{ secrets.WHATSAPP_ACCESS_TOKEN }}
#       WHATSAPP_VERIFY_TOKEN: ${{ secrets.WHATSAPP_VERIFY_TOKEN }}
#       DB_ENGINE: ${{ secrets.DB_ENGINE }}
#       DB_USERNAME: ${{ secrets.DB_USERNAME }}
#       DB_PASS: ${{ secrets.DB_PASS }}
#       DB_HOST: ${{ secrets.DB_HOST }}
#       DB_NAME: ${{ secrets.DB_NAME }}
#       DB_PORT: ${{ secrets.DB_PORT }}
#       PROD_DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}

#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4
#       with:
#         persist-credentials: false
#         fetch-depth: 0

#     - name: Set up Node
#       uses: actions/setup-node@v4
#       with:
#         node-version: 18

#     - name: Install Frontend Dependencies
#       run: npm install --legacy-peer-deps

#     - name: Build Frontend
#       run: npm run vite-build

#     - name: Set up Python
#       uses: actions/setup-python@v4
#       with:
#         python-version: "3.10"

#     - name: Install Backend Dependencies
#       run: |
#         python -m pip install --upgrade pip
#         pip install -r requirements.txt

#     - name: Collect Django Static Files
#       run: |
#         echo "üì¶ Collecting new static files..."
#         python manage.py collectstatic --no-input

#     - name: Commit and Push Built Static Files with Debugging
#       run: |
#         echo "üîß Configuring Git user"
#         git config --global user.name "credisafe"
#         git config --global user.email "credisafezw@gmail.com"
#         git remote set-url origin https://x-access-token:${{ secrets.GH_PAT }}@github.com/CredisaseZw/rentsafe.git

#         echo "üìÇ Checking current git status..."
#         git status

#         echo "‚ûï Staging changes in 'static/'"
#         git add static/

#         echo "üîç Checking for staged changes..."
#         git diff --cached

#         if git diff --cached --quiet; then
#           echo "‚úÖ No changes to commit. Skipping push."
#         else
#           echo "‚úÖ Changes detected. Committing..."
#           git commit -m "chore: Auto update static files after build"

#           echo "üöÄ Pushing to testing branch..."
#           git push origin testing

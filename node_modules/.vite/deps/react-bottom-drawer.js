import {
  _assertThisInitialized,
  init_assertThisInitialized
} from "./chunk-WMPW6FSW.js";
import {
  _extends,
  init_extends
} from "./chunk-ZWBTZBCK.js";
import {
  ENTERED,
  ENTERING,
  EXITING,
  TransitionGroupContext_default,
  Transition_default,
  _inheritsLoose,
  addClass,
  classNamesShape,
  config_default,
  forceReflow,
  init_PropTypes,
  init_Transition,
  init_TransitionGroupContext,
  init_addClass,
  init_config,
  init_inheritsLoose,
  init_reflow,
  init_removeClass,
  removeClass
} from "./chunk-IIWSUNMU.js";
import {
  require_prop_types
} from "./chunk-VFNNQF7S.js";
import {
  _objectWithoutPropertiesLoose,
  init_objectWithoutPropertiesLoose
} from "./chunk-6BOXAZI2.js";
import {
  require_react_dom
} from "./chunk-GVSLPJMJ.js";
import "./chunk-DXSYAR4N.js";
import {
  require_react
} from "./chunk-ZLZLTJQL.js";
import {
  __commonJS,
  __esm,
  __export,
  __toCommonJS,
  __toESM
} from "./chunk-2LSFTFF7.js";

// node_modules/lodash.debounce/index.js
var require_lodash = __commonJS({
  "node_modules/lodash.debounce/index.js"(exports, module) {
    var FUNC_ERROR_TEXT = "Expected a function";
    var NAN = 0 / 0;
    var symbolTag = "[object Symbol]";
    var reTrim = /^\s+|\s+$/g;
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    var reIsBinary = /^0b[01]+$/i;
    var reIsOctal = /^0o[0-7]+$/i;
    var freeParseInt = parseInt;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    var objectProto = Object.prototype;
    var objectToString = objectProto.toString;
    var nativeMax = Math.max;
    var nativeMin = Math.min;
    var now = function() {
      return root.Date.now();
    };
    function debounce(func, wait, options) {
      var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = "maxWait" in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = "trailing" in options ? !!options.trailing : trailing;
      }
      function invokeFunc(time) {
        var args = lastArgs, thisArg = lastThis;
        lastArgs = lastThis = void 0;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }
      function leadingEdge(time) {
        lastInvokeTime = time;
        timerId = setTimeout(timerExpired, wait);
        return leading ? invokeFunc(time) : result;
      }
      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, result2 = wait - timeSinceLastCall;
        return maxing ? nativeMin(result2, maxWait - timeSinceLastInvoke) : result2;
      }
      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
        return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
      }
      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        timerId = setTimeout(timerExpired, remainingWait(time));
      }
      function trailingEdge(time) {
        timerId = void 0;
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = void 0;
        return result;
      }
      function cancel() {
        if (timerId !== void 0) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = void 0;
      }
      function flush() {
        return timerId === void 0 ? result : trailingEdge(now());
      }
      function debounced() {
        var time = now(), isInvoking = shouldInvoke(time);
        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;
        if (isInvoking) {
          if (timerId === void 0) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === void 0) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
    }
    function toNumber(value) {
      if (typeof value == "number") {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == "function" ? value.valueOf() : value;
        value = isObject(other) ? other + "" : other;
      }
      if (typeof value != "string") {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, "");
      var isBinary = reIsBinary.test(value);
      return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
    }
    module.exports = debounce;
  }
});

// node_modules/react-swipeable/es/index.js
var es_exports = {};
__export(es_exports, {
  DOWN: () => DOWN,
  LEFT: () => LEFT,
  RIGHT: () => RIGHT,
  Swipeable: () => Swipeable,
  UP: () => UP,
  useSwipeable: () => useSwipeable
});
function _extends2() {
  _extends2 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends2.apply(this, arguments);
}
function _inheritsLoose2(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}
function getDirection(absX, absY, deltaX, deltaY) {
  if (absX > absY) {
    if (deltaX > 0) {
      return LEFT;
    }
    return RIGHT;
  } else if (deltaY > 0) {
    return UP;
  }
  return DOWN;
}
function rotateXYByAngle(pos, angle) {
  if (angle === 0)
    return pos;
  var angleInRadians = Math.PI / 180 * angle;
  var x = pos[0] * Math.cos(angleInRadians) + pos[1] * Math.sin(angleInRadians);
  var y = pos[1] * Math.cos(angleInRadians) - pos[0] * Math.sin(angleInRadians);
  return [x, y];
}
function getHandlers(set, handlerProps) {
  var onStart = function onStart2(event) {
    if (event.touches && event.touches.length > 1)
      return;
    set(function(state, props) {
      if (props.trackMouse) {
        document.addEventListener(mouseMove, onMove);
        document.addEventListener(mouseUp, onUp);
      }
      var _ref = event.touches ? event.touches[0] : event, clientX = _ref.clientX, clientY = _ref.clientY;
      var xy = rotateXYByAngle([clientX, clientY], props.rotationAngle);
      return _extends2({}, state, initialState, {
        eventData: {
          initial: [].concat(xy),
          first: true
        },
        xy,
        start: event.timeStamp || 0
      });
    });
  };
  var onMove = function onMove2(event) {
    set(function(state, props) {
      if (!state.xy[0] || !state.xy[1] || event.touches && event.touches.length > 1) {
        return state;
      }
      var _ref2 = event.touches ? event.touches[0] : event, clientX = _ref2.clientX, clientY = _ref2.clientY;
      var _rotateXYByAngle = rotateXYByAngle([clientX, clientY], props.rotationAngle), x = _rotateXYByAngle[0], y = _rotateXYByAngle[1];
      var deltaX = state.xy[0] - x;
      var deltaY = state.xy[1] - y;
      var absX = Math.abs(deltaX);
      var absY = Math.abs(deltaY);
      var time = (event.timeStamp || 0) - state.start;
      var velocity = Math.sqrt(absX * absX + absY * absY) / (time || 1);
      if (absX < props.delta && absY < props.delta && !state.swiping)
        return state;
      var dir = getDirection(absX, absY, deltaX, deltaY);
      var eventData = _extends2({}, state.eventData, {
        event,
        absX,
        absY,
        deltaX,
        deltaY,
        velocity,
        dir
      });
      props.onSwiping && props.onSwiping(eventData);
      var cancelablePageSwipe = false;
      if (props.onSwiping || props.onSwiped || props["onSwiped" + dir]) {
        cancelablePageSwipe = true;
      }
      if (cancelablePageSwipe && props.preventDefaultTouchmoveEvent && props.trackTouch && event.cancelable)
        event.preventDefault();
      return _extends2({}, state, {
        eventData: _extends2({}, eventData, {
          first: false
        }),
        swiping: true
      });
    });
  };
  var onEnd = function onEnd2(event) {
    set(function(state, props) {
      var eventData;
      if (state.swiping) {
        eventData = _extends2({}, state.eventData, {
          event
        });
        props.onSwiped && props.onSwiped(eventData);
        props["onSwiped" + eventData.dir] && props["onSwiped" + eventData.dir](eventData);
      }
      return _extends2({}, state, initialState, {
        eventData
      });
    });
  };
  var cleanUpMouse = function cleanUpMouse2() {
    document.removeEventListener(mouseMove, onMove);
    document.removeEventListener(mouseUp, onUp);
  };
  var onUp = function onUp2(e) {
    cleanUpMouse();
    onEnd(e);
  };
  var attachTouch = function attachTouch2(el) {
    if (el && el.addEventListener) {
      var tls = [[touchStart, onStart], [touchMove, onMove], [touchEnd, onEnd]];
      tls.forEach(function(_ref3) {
        var e = _ref3[0], h = _ref3[1];
        return el.addEventListener(e, h);
      });
      return function() {
        return tls.forEach(function(_ref4) {
          var e = _ref4[0], h = _ref4[1];
          return el.removeEventListener(e, h);
        });
      };
    }
  };
  var onRef = function onRef2(el) {
    if (el === null)
      return;
    set(function(state, props) {
      if (state.el === el)
        return state;
      var addState = {};
      if (state.el && state.el !== el && state.cleanUpTouch) {
        state.cleanUpTouch();
        addState.cleanUpTouch = null;
      }
      if (props.trackTouch && el) {
        addState.cleanUpTouch = attachTouch(el);
      }
      return _extends2({}, state, {
        el
      }, addState);
    });
  };
  var output = {
    ref: onRef
    // if track mouse attach mouse down listener
  };
  if (handlerProps.trackMouse) {
    output.onMouseDown = onStart;
  }
  return [output, attachTouch];
}
function updateTransientState(state, props, attachTouch) {
  var addState = {};
  if (!props.trackTouch && state.cleanUpTouch) {
    state.cleanUpTouch();
    addState.cleanUpTouch = null;
  } else if (props.trackTouch && !state.cleanUpTouch) {
    if (state.el) {
      addState.cleanUpTouch = attachTouch(state.el);
    }
  }
  return _extends2({}, state, addState);
}
function useSwipeable(props) {
  var trackMouse = props.trackMouse;
  var transientState = import_react.default.useRef(_extends2({}, initialState, {
    type: "hook"
  }));
  var transientProps = import_react.default.useRef();
  transientProps.current = _extends2({}, defaultProps, props);
  var _React$useMemo = import_react.default.useMemo(function() {
    return getHandlers(function(cb) {
      return transientState.current = cb(transientState.current, transientProps.current);
    }, {
      trackMouse
    });
  }, [trackMouse]), handlers = _React$useMemo[0], attachTouch = _React$useMemo[1];
  transientState.current = updateTransientState(transientState.current, transientProps.current, attachTouch);
  return handlers;
}
var import_react, import_prop_types, defaultProps, initialState, LEFT, RIGHT, UP, DOWN, touchStart, touchMove, touchEnd, mouseMove, mouseUp, Swipeable;
var init_es = __esm({
  "node_modules/react-swipeable/es/index.js"() {
    import_react = __toESM(require_react());
    import_prop_types = __toESM(require_prop_types());
    defaultProps = {
      preventDefaultTouchmoveEvent: false,
      delta: 10,
      rotationAngle: 0,
      trackMouse: false,
      trackTouch: true
    };
    initialState = {
      xy: [0, 0],
      swiping: false,
      eventData: void 0,
      start: void 0
    };
    LEFT = "Left";
    RIGHT = "Right";
    UP = "Up";
    DOWN = "Down";
    touchStart = "touchstart";
    touchMove = "touchmove";
    touchEnd = "touchend";
    mouseMove = "mousemove";
    mouseUp = "mouseup";
    Swipeable = function(_React$PureComponent) {
      _inheritsLoose2(Swipeable2, _React$PureComponent);
      function Swipeable2(props) {
        var _this;
        _this = _React$PureComponent.call(this, props) || this;
        _this._set = function(cb) {
          _this.transientState = cb(_this.transientState, _this.props);
        };
        _this.transientState = _extends2({}, initialState, {
          type: "class"
        });
        return _this;
      }
      var _proto = Swipeable2.prototype;
      _proto.render = function render() {
        var _this$props = this.props, className = _this$props.className, style = _this$props.style, _this$props$nodeName = _this$props.nodeName, nodeName = _this$props$nodeName === void 0 ? "div" : _this$props$nodeName, innerRef = _this$props.innerRef, children2 = _this$props.children, trackMouse = _this$props.trackMouse;
        var _getHandlers = getHandlers(this._set, {
          trackMouse
        }), handlers = _getHandlers[0], attachTouch = _getHandlers[1];
        this.transientState = updateTransientState(this.transientState, this.props, attachTouch);
        var ref = innerRef ? function(el) {
          return innerRef(el), handlers.ref(el);
        } : handlers.ref;
        return import_react.default.createElement(nodeName, _extends2({}, handlers, {
          className,
          style,
          ref
        }), children2);
      };
      return Swipeable2;
    }(import_react.default.PureComponent);
    Swipeable.propTypes = {
      onSwiped: import_prop_types.default.func,
      onSwiping: import_prop_types.default.func,
      onSwipedUp: import_prop_types.default.func,
      onSwipedRight: import_prop_types.default.func,
      onSwipedDown: import_prop_types.default.func,
      onSwipedLeft: import_prop_types.default.func,
      delta: import_prop_types.default.number,
      preventDefaultTouchmoveEvent: import_prop_types.default.bool,
      nodeName: import_prop_types.default.string,
      trackMouse: import_prop_types.default.bool,
      trackTouch: import_prop_types.default.bool,
      innerRef: import_prop_types.default.func,
      rotationAngle: import_prop_types.default.number
    };
    Swipeable.defaultProps = defaultProps;
  }
});

// node_modules/react-transition-group/esm/CSSTransition.js
var import_prop_types2, import_react2, _addClass, removeClass2, CSSTransition, CSSTransition_default;
var init_CSSTransition = __esm({
  "node_modules/react-transition-group/esm/CSSTransition.js"() {
    init_extends();
    init_objectWithoutPropertiesLoose();
    init_inheritsLoose();
    import_prop_types2 = __toESM(require_prop_types());
    init_addClass();
    init_removeClass();
    import_react2 = __toESM(require_react());
    init_Transition();
    init_PropTypes();
    init_reflow();
    _addClass = function addClass2(node, classes) {
      return node && classes && classes.split(" ").forEach(function(c) {
        return addClass(node, c);
      });
    };
    removeClass2 = function removeClass3(node, classes) {
      return node && classes && classes.split(" ").forEach(function(c) {
        return removeClass(node, c);
      });
    };
    CSSTransition = function(_React$Component) {
      _inheritsLoose(CSSTransition2, _React$Component);
      function CSSTransition2() {
        var _this;
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
        _this.appliedClasses = {
          appear: {},
          enter: {},
          exit: {}
        };
        _this.onEnter = function(maybeNode, maybeAppearing) {
          var _this$resolveArgument = _this.resolveArguments(maybeNode, maybeAppearing), node = _this$resolveArgument[0], appearing = _this$resolveArgument[1];
          _this.removeClasses(node, "exit");
          _this.addClass(node, appearing ? "appear" : "enter", "base");
          if (_this.props.onEnter) {
            _this.props.onEnter(maybeNode, maybeAppearing);
          }
        };
        _this.onEntering = function(maybeNode, maybeAppearing) {
          var _this$resolveArgument2 = _this.resolveArguments(maybeNode, maybeAppearing), node = _this$resolveArgument2[0], appearing = _this$resolveArgument2[1];
          var type = appearing ? "appear" : "enter";
          _this.addClass(node, type, "active");
          if (_this.props.onEntering) {
            _this.props.onEntering(maybeNode, maybeAppearing);
          }
        };
        _this.onEntered = function(maybeNode, maybeAppearing) {
          var _this$resolveArgument3 = _this.resolveArguments(maybeNode, maybeAppearing), node = _this$resolveArgument3[0], appearing = _this$resolveArgument3[1];
          var type = appearing ? "appear" : "enter";
          _this.removeClasses(node, type);
          _this.addClass(node, type, "done");
          if (_this.props.onEntered) {
            _this.props.onEntered(maybeNode, maybeAppearing);
          }
        };
        _this.onExit = function(maybeNode) {
          var _this$resolveArgument4 = _this.resolveArguments(maybeNode), node = _this$resolveArgument4[0];
          _this.removeClasses(node, "appear");
          _this.removeClasses(node, "enter");
          _this.addClass(node, "exit", "base");
          if (_this.props.onExit) {
            _this.props.onExit(maybeNode);
          }
        };
        _this.onExiting = function(maybeNode) {
          var _this$resolveArgument5 = _this.resolveArguments(maybeNode), node = _this$resolveArgument5[0];
          _this.addClass(node, "exit", "active");
          if (_this.props.onExiting) {
            _this.props.onExiting(maybeNode);
          }
        };
        _this.onExited = function(maybeNode) {
          var _this$resolveArgument6 = _this.resolveArguments(maybeNode), node = _this$resolveArgument6[0];
          _this.removeClasses(node, "exit");
          _this.addClass(node, "exit", "done");
          if (_this.props.onExited) {
            _this.props.onExited(maybeNode);
          }
        };
        _this.resolveArguments = function(maybeNode, maybeAppearing) {
          return _this.props.nodeRef ? [_this.props.nodeRef.current, maybeNode] : [maybeNode, maybeAppearing];
        };
        _this.getClassNames = function(type) {
          var classNames = _this.props.classNames;
          var isStringClassNames = typeof classNames === "string";
          var prefix = isStringClassNames && classNames ? classNames + "-" : "";
          var baseClassName = isStringClassNames ? "" + prefix + type : classNames[type];
          var activeClassName = isStringClassNames ? baseClassName + "-active" : classNames[type + "Active"];
          var doneClassName = isStringClassNames ? baseClassName + "-done" : classNames[type + "Done"];
          return {
            baseClassName,
            activeClassName,
            doneClassName
          };
        };
        return _this;
      }
      var _proto = CSSTransition2.prototype;
      _proto.addClass = function addClass3(node, type, phase) {
        var className = this.getClassNames(type)[phase + "ClassName"];
        var _this$getClassNames = this.getClassNames("enter"), doneClassName = _this$getClassNames.doneClassName;
        if (type === "appear" && phase === "done" && doneClassName) {
          className += " " + doneClassName;
        }
        if (phase === "active") {
          if (node)
            forceReflow(node);
        }
        if (className) {
          this.appliedClasses[type][phase] = className;
          _addClass(node, className);
        }
      };
      _proto.removeClasses = function removeClasses(node, type) {
        var _this$appliedClasses$ = this.appliedClasses[type], baseClassName = _this$appliedClasses$.base, activeClassName = _this$appliedClasses$.active, doneClassName = _this$appliedClasses$.done;
        this.appliedClasses[type] = {};
        if (baseClassName) {
          removeClass2(node, baseClassName);
        }
        if (activeClassName) {
          removeClass2(node, activeClassName);
        }
        if (doneClassName) {
          removeClass2(node, doneClassName);
        }
      };
      _proto.render = function render() {
        var _this$props = this.props, _ = _this$props.classNames, props = _objectWithoutPropertiesLoose(_this$props, ["classNames"]);
        return import_react2.default.createElement(Transition_default, _extends({}, props, {
          onEnter: this.onEnter,
          onEntered: this.onEntered,
          onEntering: this.onEntering,
          onExit: this.onExit,
          onExiting: this.onExiting,
          onExited: this.onExited
        }));
      };
      return CSSTransition2;
    }(import_react2.default.Component);
    CSSTransition.defaultProps = {
      classNames: ""
    };
    CSSTransition.propTypes = true ? _extends({}, Transition_default.propTypes, {
      /**
       * The animation classNames applied to the component as it appears, enters,
       * exits or has finished the transition. A single name can be provided, which
       * will be suffixed for each stage, e.g. `classNames="fade"` applies:
       *
       * - `fade-appear`, `fade-appear-active`, `fade-appear-done`
       * - `fade-enter`, `fade-enter-active`, `fade-enter-done`
       * - `fade-exit`, `fade-exit-active`, `fade-exit-done`
       *
       * A few details to note about how these classes are applied:
       *
       * 1. They are _joined_ with the ones that are already defined on the child
       *    component, so if you want to add some base styles, you can use
       *    `className` without worrying that it will be overridden.
       *
       * 2. If the transition component mounts with `in={false}`, no classes are
       *    applied yet. You might be expecting `*-exit-done`, but if you think
       *    about it, a component cannot finish exiting if it hasn't entered yet.
       *
       * 2. `fade-appear-done` and `fade-enter-done` will _both_ be applied. This
       *    allows you to define different behavior for when appearing is done and
       *    when regular entering is done, using selectors like
       *    `.fade-enter-done:not(.fade-appear-done)`. For example, you could apply
       *    an epic entrance animation when element first appears in the DOM using
       *    [Animate.css](https://daneden.github.io/animate.css/). Otherwise you can
       *    simply use `fade-enter-done` for defining both cases.
       *
       * Each individual classNames can also be specified independently like:
       *
       * ```js
       * classNames={{
       *  appear: 'my-appear',
       *  appearActive: 'my-active-appear',
       *  appearDone: 'my-done-appear',
       *  enter: 'my-enter',
       *  enterActive: 'my-active-enter',
       *  enterDone: 'my-done-enter',
       *  exit: 'my-exit',
       *  exitActive: 'my-active-exit',
       *  exitDone: 'my-done-exit',
       * }}
       * ```
       *
       * If you want to set these classes using CSS Modules:
       *
       * ```js
       * import styles from './styles.css';
       * ```
       *
       * you might want to use camelCase in your CSS file, that way could simply
       * spread them instead of listing them one by one:
       *
       * ```js
       * classNames={{ ...styles }}
       * ```
       *
       * @type {string | {
       *  appear?: string,
       *  appearActive?: string,
       *  appearDone?: string,
       *  enter?: string,
       *  enterActive?: string,
       *  enterDone?: string,
       *  exit?: string,
       *  exitActive?: string,
       *  exitDone?: string,
       * }}
       */
      classNames: classNamesShape,
      /**
       * A `<Transition>` callback fired immediately after the 'enter' or 'appear' class is
       * applied.
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed.
       *
       * @type Function(node: HtmlElement, isAppearing: bool)
       */
      onEnter: import_prop_types2.default.func,
      /**
       * A `<Transition>` callback fired immediately after the 'enter-active' or
       * 'appear-active' class is applied.
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed.
       *
       * @type Function(node: HtmlElement, isAppearing: bool)
       */
      onEntering: import_prop_types2.default.func,
      /**
       * A `<Transition>` callback fired immediately after the 'enter' or
       * 'appear' classes are **removed** and the `done` class is added to the DOM node.
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed.
       *
       * @type Function(node: HtmlElement, isAppearing: bool)
       */
      onEntered: import_prop_types2.default.func,
      /**
       * A `<Transition>` callback fired immediately after the 'exit' class is
       * applied.
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed
       *
       * @type Function(node: HtmlElement)
       */
      onExit: import_prop_types2.default.func,
      /**
       * A `<Transition>` callback fired immediately after the 'exit-active' is applied.
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed
       *
       * @type Function(node: HtmlElement)
       */
      onExiting: import_prop_types2.default.func,
      /**
       * A `<Transition>` callback fired immediately after the 'exit' classes
       * are **removed** and the `exit-done` class is added to the DOM node.
       *
       * **Note**: when `nodeRef` prop is passed, `node` is not passed
       *
       * @type Function(node: HtmlElement)
       */
      onExited: import_prop_types2.default.func
    }) : {};
    CSSTransition_default = CSSTransition;
  }
});

// node_modules/react-transition-group/esm/utils/ChildMapping.js
function getChildMapping(children2, mapFn) {
  var mapper = function mapper2(child) {
    return mapFn && (0, import_react3.isValidElement)(child) ? mapFn(child) : child;
  };
  var result = /* @__PURE__ */ Object.create(null);
  if (children2)
    import_react3.Children.map(children2, function(c) {
      return c;
    }).forEach(function(child) {
      result[child.key] = mapper(child);
    });
  return result;
}
function mergeChildMappings(prev, next) {
  prev = prev || {};
  next = next || {};
  function getValueForKey(key) {
    return key in next ? next[key] : prev[key];
  }
  var nextKeysPending = /* @__PURE__ */ Object.create(null);
  var pendingKeys = [];
  for (var prevKey in prev) {
    if (prevKey in next) {
      if (pendingKeys.length) {
        nextKeysPending[prevKey] = pendingKeys;
        pendingKeys = [];
      }
    } else {
      pendingKeys.push(prevKey);
    }
  }
  var i;
  var childMapping = {};
  for (var nextKey in next) {
    if (nextKeysPending[nextKey]) {
      for (i = 0; i < nextKeysPending[nextKey].length; i++) {
        var pendingNextKey = nextKeysPending[nextKey][i];
        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
      }
    }
    childMapping[nextKey] = getValueForKey(nextKey);
  }
  for (i = 0; i < pendingKeys.length; i++) {
    childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
  }
  return childMapping;
}
function getProp(child, prop, props) {
  return props[prop] != null ? props[prop] : child.props[prop];
}
function getInitialChildMapping(props, onExited) {
  return getChildMapping(props.children, function(child) {
    return (0, import_react3.cloneElement)(child, {
      onExited: onExited.bind(null, child),
      in: true,
      appear: getProp(child, "appear", props),
      enter: getProp(child, "enter", props),
      exit: getProp(child, "exit", props)
    });
  });
}
function getNextChildMapping(nextProps, prevChildMapping, onExited) {
  var nextChildMapping = getChildMapping(nextProps.children);
  var children2 = mergeChildMappings(prevChildMapping, nextChildMapping);
  Object.keys(children2).forEach(function(key) {
    var child = children2[key];
    if (!(0, import_react3.isValidElement)(child))
      return;
    var hasPrev = key in prevChildMapping;
    var hasNext = key in nextChildMapping;
    var prevChild = prevChildMapping[key];
    var isLeaving = (0, import_react3.isValidElement)(prevChild) && !prevChild.props.in;
    if (hasNext && (!hasPrev || isLeaving)) {
      children2[key] = (0, import_react3.cloneElement)(child, {
        onExited: onExited.bind(null, child),
        in: true,
        exit: getProp(child, "exit", nextProps),
        enter: getProp(child, "enter", nextProps)
      });
    } else if (!hasNext && hasPrev && !isLeaving) {
      children2[key] = (0, import_react3.cloneElement)(child, {
        in: false
      });
    } else if (hasNext && hasPrev && (0, import_react3.isValidElement)(prevChild)) {
      children2[key] = (0, import_react3.cloneElement)(child, {
        onExited: onExited.bind(null, child),
        in: prevChild.props.in,
        exit: getProp(child, "exit", nextProps),
        enter: getProp(child, "enter", nextProps)
      });
    }
  });
  return children2;
}
var import_react3;
var init_ChildMapping = __esm({
  "node_modules/react-transition-group/esm/utils/ChildMapping.js"() {
    import_react3 = __toESM(require_react());
  }
});

// node_modules/react-transition-group/esm/TransitionGroup.js
var import_prop_types3, import_react4, values, defaultProps2, TransitionGroup, TransitionGroup_default;
var init_TransitionGroup = __esm({
  "node_modules/react-transition-group/esm/TransitionGroup.js"() {
    init_objectWithoutPropertiesLoose();
    init_extends();
    init_assertThisInitialized();
    init_inheritsLoose();
    import_prop_types3 = __toESM(require_prop_types());
    import_react4 = __toESM(require_react());
    init_TransitionGroupContext();
    init_ChildMapping();
    values = Object.values || function(obj) {
      return Object.keys(obj).map(function(k) {
        return obj[k];
      });
    };
    defaultProps2 = {
      component: "div",
      childFactory: function childFactory(child) {
        return child;
      }
    };
    TransitionGroup = function(_React$Component) {
      _inheritsLoose(TransitionGroup2, _React$Component);
      function TransitionGroup2(props, context) {
        var _this;
        _this = _React$Component.call(this, props, context) || this;
        var handleExited = _this.handleExited.bind(_assertThisInitialized(_this));
        _this.state = {
          contextValue: {
            isMounting: true
          },
          handleExited,
          firstRender: true
        };
        return _this;
      }
      var _proto = TransitionGroup2.prototype;
      _proto.componentDidMount = function componentDidMount() {
        this.mounted = true;
        this.setState({
          contextValue: {
            isMounting: false
          }
        });
      };
      _proto.componentWillUnmount = function componentWillUnmount() {
        this.mounted = false;
      };
      TransitionGroup2.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
        var prevChildMapping = _ref.children, handleExited = _ref.handleExited, firstRender = _ref.firstRender;
        return {
          children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),
          firstRender: false
        };
      };
      _proto.handleExited = function handleExited(child, node) {
        var currentChildMapping = getChildMapping(this.props.children);
        if (child.key in currentChildMapping)
          return;
        if (child.props.onExited) {
          child.props.onExited(node);
        }
        if (this.mounted) {
          this.setState(function(state) {
            var children2 = _extends({}, state.children);
            delete children2[child.key];
            return {
              children: children2
            };
          });
        }
      };
      _proto.render = function render() {
        var _this$props = this.props, Component = _this$props.component, childFactory2 = _this$props.childFactory, props = _objectWithoutPropertiesLoose(_this$props, ["component", "childFactory"]);
        var contextValue = this.state.contextValue;
        var children2 = values(this.state.children).map(childFactory2);
        delete props.appear;
        delete props.enter;
        delete props.exit;
        if (Component === null) {
          return import_react4.default.createElement(TransitionGroupContext_default.Provider, {
            value: contextValue
          }, children2);
        }
        return import_react4.default.createElement(TransitionGroupContext_default.Provider, {
          value: contextValue
        }, import_react4.default.createElement(Component, props, children2));
      };
      return TransitionGroup2;
    }(import_react4.default.Component);
    TransitionGroup.propTypes = true ? {
      /**
       * `<TransitionGroup>` renders a `<div>` by default. You can change this
       * behavior by providing a `component` prop.
       * If you use React v16+ and would like to avoid a wrapping `<div>` element
       * you can pass in `component={null}`. This is useful if the wrapping div
       * borks your css styles.
       */
      component: import_prop_types3.default.any,
      /**
       * A set of `<Transition>` components, that are toggled `in` and out as they
       * leave. the `<TransitionGroup>` will inject specific transition props, so
       * remember to spread them through if you are wrapping the `<Transition>` as
       * with our `<Fade>` example.
       *
       * While this component is meant for multiple `Transition` or `CSSTransition`
       * children, sometimes you may want to have a single transition child with
       * content that you want to be transitioned out and in when you change it
       * (e.g. routes, images etc.) In that case you can change the `key` prop of
       * the transition child as you change its content, this will cause
       * `TransitionGroup` to transition the child out and back in.
       */
      children: import_prop_types3.default.node,
      /**
       * A convenience prop that enables or disables appear animations
       * for all children. Note that specifying this will override any defaults set
       * on individual children Transitions.
       */
      appear: import_prop_types3.default.bool,
      /**
       * A convenience prop that enables or disables enter animations
       * for all children. Note that specifying this will override any defaults set
       * on individual children Transitions.
       */
      enter: import_prop_types3.default.bool,
      /**
       * A convenience prop that enables or disables exit animations
       * for all children. Note that specifying this will override any defaults set
       * on individual children Transitions.
       */
      exit: import_prop_types3.default.bool,
      /**
       * You may need to apply reactive updates to a child as it is exiting.
       * This is generally done by using `cloneElement` however in the case of an exiting
       * child the element has already been removed and not accessible to the consumer.
       *
       * If you do need to update a child as it leaves you can provide a `childFactory`
       * to wrap every child, even the ones that are leaving.
       *
       * @type Function(child: ReactElement) -> ReactElement
       */
      childFactory: import_prop_types3.default.func
    } : {};
    TransitionGroup.defaultProps = defaultProps2;
    TransitionGroup_default = TransitionGroup;
  }
});

// node_modules/react-transition-group/esm/ReplaceTransition.js
var import_prop_types4, import_react5, import_react_dom, ReplaceTransition, ReplaceTransition_default;
var init_ReplaceTransition = __esm({
  "node_modules/react-transition-group/esm/ReplaceTransition.js"() {
    init_objectWithoutPropertiesLoose();
    init_inheritsLoose();
    import_prop_types4 = __toESM(require_prop_types());
    import_react5 = __toESM(require_react());
    import_react_dom = __toESM(require_react_dom());
    init_TransitionGroup();
    ReplaceTransition = function(_React$Component) {
      _inheritsLoose(ReplaceTransition2, _React$Component);
      function ReplaceTransition2() {
        var _this;
        for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
          _args[_key] = arguments[_key];
        }
        _this = _React$Component.call.apply(_React$Component, [this].concat(_args)) || this;
        _this.handleEnter = function() {
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          return _this.handleLifecycle("onEnter", 0, args);
        };
        _this.handleEntering = function() {
          for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
          }
          return _this.handleLifecycle("onEntering", 0, args);
        };
        _this.handleEntered = function() {
          for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
            args[_key4] = arguments[_key4];
          }
          return _this.handleLifecycle("onEntered", 0, args);
        };
        _this.handleExit = function() {
          for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
            args[_key5] = arguments[_key5];
          }
          return _this.handleLifecycle("onExit", 1, args);
        };
        _this.handleExiting = function() {
          for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
            args[_key6] = arguments[_key6];
          }
          return _this.handleLifecycle("onExiting", 1, args);
        };
        _this.handleExited = function() {
          for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
            args[_key7] = arguments[_key7];
          }
          return _this.handleLifecycle("onExited", 1, args);
        };
        return _this;
      }
      var _proto = ReplaceTransition2.prototype;
      _proto.handleLifecycle = function handleLifecycle(handler, idx, originalArgs) {
        var _child$props;
        var children2 = this.props.children;
        var child = import_react5.default.Children.toArray(children2)[idx];
        if (child.props[handler])
          (_child$props = child.props)[handler].apply(_child$props, originalArgs);
        if (this.props[handler]) {
          var maybeNode = child.props.nodeRef ? void 0 : import_react_dom.default.findDOMNode(this);
          this.props[handler](maybeNode);
        }
      };
      _proto.render = function render() {
        var _this$props = this.props, children2 = _this$props.children, inProp = _this$props.in, props = _objectWithoutPropertiesLoose(_this$props, ["children", "in"]);
        var _React$Children$toArr = import_react5.default.Children.toArray(children2), first = _React$Children$toArr[0], second = _React$Children$toArr[1];
        delete props.onEnter;
        delete props.onEntering;
        delete props.onEntered;
        delete props.onExit;
        delete props.onExiting;
        delete props.onExited;
        return import_react5.default.createElement(TransitionGroup_default, props, inProp ? import_react5.default.cloneElement(first, {
          key: "first",
          onEnter: this.handleEnter,
          onEntering: this.handleEntering,
          onEntered: this.handleEntered
        }) : import_react5.default.cloneElement(second, {
          key: "second",
          onEnter: this.handleExit,
          onEntering: this.handleExiting,
          onEntered: this.handleExited
        }));
      };
      return ReplaceTransition2;
    }(import_react5.default.Component);
    ReplaceTransition.propTypes = true ? {
      in: import_prop_types4.default.bool.isRequired,
      children: function children(props, propName) {
        if (import_react5.default.Children.count(props[propName]) !== 2)
          return new Error('"' + propName + '" must be exactly two transition components.');
        return null;
      }
    } : {};
    ReplaceTransition_default = ReplaceTransition;
  }
});

// node_modules/react-transition-group/esm/SwitchTransition.js
function areChildrenDifferent(oldChildren, newChildren) {
  if (oldChildren === newChildren)
    return false;
  if (import_react6.default.isValidElement(oldChildren) && import_react6.default.isValidElement(newChildren) && oldChildren.key != null && oldChildren.key === newChildren.key) {
    return false;
  }
  return true;
}
var import_react6, import_prop_types5, _leaveRenders, _enterRenders, modes, callHook, leaveRenders, enterRenders, SwitchTransition, SwitchTransition_default;
var init_SwitchTransition = __esm({
  "node_modules/react-transition-group/esm/SwitchTransition.js"() {
    init_inheritsLoose();
    import_react6 = __toESM(require_react());
    import_prop_types5 = __toESM(require_prop_types());
    init_Transition();
    init_TransitionGroupContext();
    modes = {
      out: "out-in",
      in: "in-out"
    };
    callHook = function callHook2(element, name, cb) {
      return function() {
        var _element$props;
        element.props[name] && (_element$props = element.props)[name].apply(_element$props, arguments);
        cb();
      };
    };
    leaveRenders = (_leaveRenders = {}, _leaveRenders[modes.out] = function(_ref) {
      var current = _ref.current, changeState = _ref.changeState;
      return import_react6.default.cloneElement(current, {
        in: false,
        onExited: callHook(current, "onExited", function() {
          changeState(ENTERING, null);
        })
      });
    }, _leaveRenders[modes.in] = function(_ref2) {
      var current = _ref2.current, changeState = _ref2.changeState, children2 = _ref2.children;
      return [current, import_react6.default.cloneElement(children2, {
        in: true,
        onEntered: callHook(children2, "onEntered", function() {
          changeState(ENTERING);
        })
      })];
    }, _leaveRenders);
    enterRenders = (_enterRenders = {}, _enterRenders[modes.out] = function(_ref3) {
      var children2 = _ref3.children, changeState = _ref3.changeState;
      return import_react6.default.cloneElement(children2, {
        in: true,
        onEntered: callHook(children2, "onEntered", function() {
          changeState(ENTERED, import_react6.default.cloneElement(children2, {
            in: true
          }));
        })
      });
    }, _enterRenders[modes.in] = function(_ref4) {
      var current = _ref4.current, children2 = _ref4.children, changeState = _ref4.changeState;
      return [import_react6.default.cloneElement(current, {
        in: false,
        onExited: callHook(current, "onExited", function() {
          changeState(ENTERED, import_react6.default.cloneElement(children2, {
            in: true
          }));
        })
      }), import_react6.default.cloneElement(children2, {
        in: true
      })];
    }, _enterRenders);
    SwitchTransition = function(_React$Component) {
      _inheritsLoose(SwitchTransition2, _React$Component);
      function SwitchTransition2() {
        var _this;
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
        _this.state = {
          status: ENTERED,
          current: null
        };
        _this.appeared = false;
        _this.changeState = function(status, current) {
          if (current === void 0) {
            current = _this.state.current;
          }
          _this.setState({
            status,
            current
          });
        };
        return _this;
      }
      var _proto = SwitchTransition2.prototype;
      _proto.componentDidMount = function componentDidMount() {
        this.appeared = true;
      };
      SwitchTransition2.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {
        if (props.children == null) {
          return {
            current: null
          };
        }
        if (state.status === ENTERING && props.mode === modes.in) {
          return {
            status: ENTERING
          };
        }
        if (state.current && areChildrenDifferent(state.current, props.children)) {
          return {
            status: EXITING
          };
        }
        return {
          current: import_react6.default.cloneElement(props.children, {
            in: true
          })
        };
      };
      _proto.render = function render() {
        var _this$props = this.props, children2 = _this$props.children, mode = _this$props.mode, _this$state = this.state, status = _this$state.status, current = _this$state.current;
        var data = {
          children: children2,
          current,
          changeState: this.changeState,
          status
        };
        var component;
        switch (status) {
          case ENTERING:
            component = enterRenders[mode](data);
            break;
          case EXITING:
            component = leaveRenders[mode](data);
            break;
          case ENTERED:
            component = current;
        }
        return import_react6.default.createElement(TransitionGroupContext_default.Provider, {
          value: {
            isMounting: !this.appeared
          }
        }, component);
      };
      return SwitchTransition2;
    }(import_react6.default.Component);
    SwitchTransition.propTypes = true ? {
      /**
       * Transition modes.
       * `out-in`: Current element transitions out first, then when complete, the new element transitions in.
       * `in-out`: New element transitions in first, then when complete, the current element transitions out.
       *
       * @type {'out-in'|'in-out'}
       */
      mode: import_prop_types5.default.oneOf([modes.in, modes.out]),
      /**
       * Any `Transition` or `CSSTransition` component.
       */
      children: import_prop_types5.default.oneOfType([import_prop_types5.default.element.isRequired])
    } : {};
    SwitchTransition.defaultProps = {
      mode: modes.out
    };
    SwitchTransition_default = SwitchTransition;
  }
});

// node_modules/react-transition-group/esm/index.js
var esm_exports = {};
__export(esm_exports, {
  CSSTransition: () => CSSTransition_default,
  ReplaceTransition: () => ReplaceTransition_default,
  SwitchTransition: () => SwitchTransition_default,
  Transition: () => Transition_default,
  TransitionGroup: () => TransitionGroup_default,
  config: () => config_default
});
var init_esm = __esm({
  "node_modules/react-transition-group/esm/index.js"() {
    init_CSSTransition();
    init_ReplaceTransition();
    init_SwitchTransition();
    init_TransitionGroup();
    init_Transition();
    init_config();
  }
});

// node_modules/react-bottom-drawer/dist/lib/hooks/useEscButton.js
var require_useEscButton = __commonJS({
  "node_modules/react-bottom-drawer/dist/lib/hooks/useEscButton.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var React6 = __importStar(require_react());
    function useEscButton(callback, enabled) {
      if (enabled === void 0) {
        enabled = true;
      }
      var callbackOnEsc = function(ev) {
        if (ev.key !== "Escape") {
          return;
        }
        callback();
      };
      React6.useEffect(function() {
        if (!enabled) {
          return;
        }
        window.addEventListener("keydown", callbackOnEsc);
        return function() {
          window.removeEventListener("keydown", callbackOnEsc);
        };
      });
    }
    exports.default = useEscButton;
  }
});

// node_modules/body-scroll-lock/lib/bodyScrollLock.esm.js
var bodyScrollLock_esm_exports = {};
__export(bodyScrollLock_esm_exports, {
  clearAllBodyScrollLocks: () => clearAllBodyScrollLocks,
  disableBodyScroll: () => disableBodyScroll,
  enableBodyScroll: () => enableBodyScroll
});
function _toConsumableArray(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }
    return arr2;
  } else {
    return Array.from(arr);
  }
}
var hasPassiveEvents, passiveTestOptions, isIosDevice, locks, documentListenerAdded, initialClientY, previousBodyOverflowSetting, previousBodyPaddingRight, allowTouchMove, preventDefault, setOverflowHidden, restoreOverflowSetting, isTargetElementTotallyScrolled, handleScroll, disableBodyScroll, clearAllBodyScrollLocks, enableBodyScroll;
var init_bodyScrollLock_esm = __esm({
  "node_modules/body-scroll-lock/lib/bodyScrollLock.esm.js"() {
    hasPassiveEvents = false;
    if (typeof window !== "undefined") {
      passiveTestOptions = {
        get passive() {
          hasPassiveEvents = true;
          return void 0;
        }
      };
      window.addEventListener("testPassive", null, passiveTestOptions);
      window.removeEventListener("testPassive", null, passiveTestOptions);
    }
    isIosDevice = typeof window !== "undefined" && window.navigator && window.navigator.platform && (/iP(ad|hone|od)/.test(window.navigator.platform) || window.navigator.platform === "MacIntel" && window.navigator.maxTouchPoints > 1);
    locks = [];
    documentListenerAdded = false;
    initialClientY = -1;
    previousBodyOverflowSetting = void 0;
    previousBodyPaddingRight = void 0;
    allowTouchMove = function allowTouchMove2(el) {
      return locks.some(function(lock) {
        if (lock.options.allowTouchMove && lock.options.allowTouchMove(el)) {
          return true;
        }
        return false;
      });
    };
    preventDefault = function preventDefault2(rawEvent) {
      var e = rawEvent || window.event;
      if (allowTouchMove(e.target)) {
        return true;
      }
      if (e.touches.length > 1)
        return true;
      if (e.preventDefault)
        e.preventDefault();
      return false;
    };
    setOverflowHidden = function setOverflowHidden2(options) {
      if (previousBodyPaddingRight === void 0) {
        var _reserveScrollBarGap = !!options && options.reserveScrollBarGap === true;
        var scrollBarGap = window.innerWidth - document.documentElement.clientWidth;
        if (_reserveScrollBarGap && scrollBarGap > 0) {
          previousBodyPaddingRight = document.body.style.paddingRight;
          document.body.style.paddingRight = scrollBarGap + "px";
        }
      }
      if (previousBodyOverflowSetting === void 0) {
        previousBodyOverflowSetting = document.body.style.overflow;
        document.body.style.overflow = "hidden";
      }
    };
    restoreOverflowSetting = function restoreOverflowSetting2() {
      if (previousBodyPaddingRight !== void 0) {
        document.body.style.paddingRight = previousBodyPaddingRight;
        previousBodyPaddingRight = void 0;
      }
      if (previousBodyOverflowSetting !== void 0) {
        document.body.style.overflow = previousBodyOverflowSetting;
        previousBodyOverflowSetting = void 0;
      }
    };
    isTargetElementTotallyScrolled = function isTargetElementTotallyScrolled2(targetElement) {
      return targetElement ? targetElement.scrollHeight - targetElement.scrollTop <= targetElement.clientHeight : false;
    };
    handleScroll = function handleScroll2(event, targetElement) {
      var clientY = event.targetTouches[0].clientY - initialClientY;
      if (allowTouchMove(event.target)) {
        return false;
      }
      if (targetElement && targetElement.scrollTop === 0 && clientY > 0) {
        return preventDefault(event);
      }
      if (isTargetElementTotallyScrolled(targetElement) && clientY < 0) {
        return preventDefault(event);
      }
      event.stopPropagation();
      return true;
    };
    disableBodyScroll = function disableBodyScroll2(targetElement, options) {
      if (!targetElement) {
        console.error("disableBodyScroll unsuccessful - targetElement must be provided when calling disableBodyScroll on IOS devices.");
        return;
      }
      if (locks.some(function(lock2) {
        return lock2.targetElement === targetElement;
      })) {
        return;
      }
      var lock = {
        targetElement,
        options: options || {}
      };
      locks = [].concat(_toConsumableArray(locks), [lock]);
      if (isIosDevice) {
        targetElement.ontouchstart = function(event) {
          if (event.targetTouches.length === 1) {
            initialClientY = event.targetTouches[0].clientY;
          }
        };
        targetElement.ontouchmove = function(event) {
          if (event.targetTouches.length === 1) {
            handleScroll(event, targetElement);
          }
        };
        if (!documentListenerAdded) {
          document.addEventListener("touchmove", preventDefault, hasPassiveEvents ? { passive: false } : void 0);
          documentListenerAdded = true;
        }
      } else {
        setOverflowHidden(options);
      }
    };
    clearAllBodyScrollLocks = function clearAllBodyScrollLocks2() {
      if (isIosDevice) {
        locks.forEach(function(lock) {
          lock.targetElement.ontouchstart = null;
          lock.targetElement.ontouchmove = null;
        });
        if (documentListenerAdded) {
          document.removeEventListener("touchmove", preventDefault, hasPassiveEvents ? { passive: false } : void 0);
          documentListenerAdded = false;
        }
        initialClientY = -1;
      } else {
        restoreOverflowSetting();
      }
      locks = [];
    };
    enableBodyScroll = function enableBodyScroll2(targetElement) {
      if (!targetElement) {
        console.error("enableBodyScroll unsuccessful - targetElement must be provided when calling enableBodyScroll on IOS devices.");
        return;
      }
      locks = locks.filter(function(lock) {
        return lock.targetElement !== targetElement;
      });
      if (isIosDevice) {
        targetElement.ontouchstart = null;
        targetElement.ontouchmove = null;
        if (documentListenerAdded && locks.length === 0) {
          document.removeEventListener("touchmove", preventDefault, hasPassiveEvents ? { passive: false } : void 0);
          documentListenerAdded = false;
        }
      } else if (!locks.length) {
        restoreOverflowSetting();
      }
    };
  }
});

// node_modules/react-bottom-drawer/dist/lib/hooks/usePreventScroll.js
var require_usePreventScroll = __commonJS({
  "node_modules/react-bottom-drawer/dist/lib/hooks/usePreventScroll.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var React6 = __importStar(require_react());
    var body_scroll_lock_1 = (init_bodyScrollLock_esm(), __toCommonJS(bodyScrollLock_esm_exports));
    function usePreventScroll(enabled, contentWrapperClass) {
      React6.useLayoutEffect(function() {
        if (typeof document === "undefined" || !enabled) {
          return;
        }
        var scrollableElement = document.querySelector("." + contentWrapperClass);
        body_scroll_lock_1.disableBodyScroll(scrollableElement);
        console.log("Disable body scrol");
        return function() {
          body_scroll_lock_1.enableBodyScroll(scrollableElement);
        };
      }, [enabled]);
    }
    exports.default = usePreventScroll;
  }
});

// node_modules/react-bottom-drawer/dist/lib/styles.js
var require_styles = __commonJS({
  "node_modules/react-bottom-drawer/dist/lib/styles.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getClassNames = exports.BackdropStyles = exports.TransitionStyles = void 0;
    exports.TransitionStyles = {
      entering: { transform: "translate3d(0, 100%, 0)" },
      entered: { transform: "none" },
      exiting: { transform: "translate3d(0, 100%, 0)" },
      exited: { display: "none" }
    };
    exports.BackdropStyles = {
      entering: { opacity: "0" },
      entered: { opacity: "1" },
      exiting: { opacity: "0" },
      exited: { display: "none" }
    };
    exports.getClassNames = function(identifier) {
      return {
        backdrop: "rbd-" + identifier + "-db",
        drawer: "rbd-" + identifier + "-dr",
        handleWrapper: "rbd-" + identifier + "-hw",
        handle: "rbd-" + identifier + "-h",
        contentWrapper: "rbd-" + identifier + "-cw"
      };
    };
    var globalStylesheet = function(identifier, _a) {
      var duration = _a.duration, hideScrollbars = _a.hideScrollbars;
      var classNames = exports.getClassNames(identifier);
      return ("\n  ." + classNames.backdrop + " {\n    position: fixed;\n    z-index: 10;\n    background: rgba(0, 0, 0, 0.5);\n    top: 0;\n    left: 0;\n    height: 100%;\n    width: 100%;\n    transition: opacity " + duration + "ms;\n  }\n  ." + classNames.drawer + " {\n    position: fixed;\n    z-index: 11;\n    left: 0;\n    bottom: 0;\n    width: 100vw;\n    background: white;\n    border-top-left-radius: 15px;\n    border-top-right-radius: 15px;\n    transition: transform " + duration + "ms;\n  }\n  ." + classNames.handleWrapper + " {\n    display: flex;\n    justify-content: center;\n    padding: 10px 0;\n  }\n  ." + classNames.handle + " {\n    background: #e3e3e3;\n    height: 5px;\n    width: 70px;\n    border-radius: 5px;\n  }\n  ." + classNames.contentWrapper + " {\n    padding: 0 10px;\n    max-height: calc(70vh - 25px);\n    overflow-x: hidden;\n    overflow-y: auto;\n    " + (hideScrollbars ? "\n      scrollbar-width: none;\n      -ms-overflow-style: none;\n    " : "") + "\n  }\n  " + (hideScrollbars ? "\n  ." + classNames.contentWrapper + "::-webkit-scrollbar {\n    width: 0px;\n    background: transparent;\n  }\n  " : "") + "\n    \n").split("\n").map(function(l) {
        return l.trim();
      }).join("");
    };
    exports.default = globalStylesheet;
  }
});

// node_modules/react-bottom-drawer/dist/lib/hooks/useGlobalStyles.js
var require_useGlobalStyles = __commonJS({
  "node_modules/react-bottom-drawer/dist/lib/hooks/useGlobalStyles.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var react_1 = __importDefault(require_react());
    var styles_1 = __importStar(require_styles());
    function useGlobalStyles(duration, hideScrollbars) {
      var identifier = react_1.default.useMemo(function() {
        return Math.random().toString(36).substr(2);
      }, []);
      var classNames = react_1.default.useMemo(function() {
        return styles_1.getClassNames(identifier);
      }, [identifier]);
      react_1.default.useEffect(function() {
        if (typeof document === "undefined") {
          return;
        }
        var styles = styles_1.default(identifier, { duration, hideScrollbars });
        var tag = document.createElement("style");
        tag.setAttribute("data-react-bottom-drawer", identifier);
        tag.innerHTML = styles;
        document.head.appendChild(tag);
        return function() {
          var stylesheet = document.querySelector("style[data-react-bottom-drawer='" + identifier + "']");
          if (stylesheet) {
            stylesheet.remove();
          }
        };
      }, [duration, hideScrollbars]);
      return classNames;
    }
    exports.default = useGlobalStyles;
  }
});

// node_modules/clsx/dist/clsx.m.js
var clsx_m_exports = {};
__export(clsx_m_exports, {
  clsx: () => clsx,
  default: () => clsx_m_default
});
function r(e) {
  var t, f, n = "";
  if ("string" == typeof e || "number" == typeof e)
    n += e;
  else if ("object" == typeof e)
    if (Array.isArray(e))
      for (t = 0; t < e.length; t++)
        e[t] && (f = r(e[t])) && (n && (n += " "), n += f);
    else
      for (t in e)
        e[t] && (n && (n += " "), n += t);
  return n;
}
function clsx() {
  for (var e, t, f = 0, n = ""; f < arguments.length; )
    (e = arguments[f++]) && (t = r(e)) && (n && (n += " "), n += t);
  return n;
}
var clsx_m_default;
var init_clsx_m = __esm({
  "node_modules/clsx/dist/clsx.m.js"() {
    clsx_m_default = clsx;
  }
});

// node_modules/react-bottom-drawer/dist/index.js
var require_dist = __commonJS({
  "node_modules/react-bottom-drawer/dist/index.js"(exports) {
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var lodash_debounce_1 = __importDefault(require_lodash());
    var React6 = __importStar(require_react());
    var react_swipeable_1 = (init_es(), __toCommonJS(es_exports));
    var react_transition_group_1 = (init_esm(), __toCommonJS(esm_exports));
    var useEscButton_1 = __importDefault(require_useEscButton());
    var usePreventScroll_1 = __importDefault(require_usePreventScroll());
    var styles_1 = require_styles();
    var useGlobalStyles_1 = __importDefault(require_useGlobalStyles());
    var clsx_1 = __importDefault((init_clsx_m(), __toCommonJS(clsx_m_exports)));
    var SlideUpTransition = function(_a) {
      var isVisible = _a.isVisible, children2 = _a.children, onClose = _a.onClose, _b = _a.unmountOnExit, unmountOnExit = _b === void 0 ? true : _b, _c = _a.mountOnEnter, mountOnEnter = _c === void 0 ? true : _c, _d = _a.duration, duration = _d === void 0 ? 250 : _d, _e = _a.hideScrollbars, hideScrollbars = _e === void 0 ? false : _e, _f = _a.className, className = _f === void 0 ? "" : _f;
      var classNames = useGlobalStyles_1.default(duration, hideScrollbars);
      var nodeRef = React6.useRef(null);
      useEscButton_1.default(onClose, isVisible);
      usePreventScroll_1.default(isVisible, classNames.contentWrapper);
      var _g = React6.useState(0), currentDeltaY = _g[0], setDeltaY = _g[1];
      var swipeHandlers = react_swipeable_1.useSwipeable({
        onSwipedDown: lodash_debounce_1.default(function(_a2) {
          var velocity = _a2.velocity;
          setDeltaY(0);
          if (velocity > 0.5) {
            onClose();
          }
        }, 500, { leading: true }),
        onSwiping: function(_a2) {
          var deltaY = _a2.deltaY;
          setDeltaY(deltaY);
        }
      });
      var getTransforms = function() {
        if (currentDeltaY >= 0) {
          return void 0;
        }
        return {
          transform: "translate3d(0, " + currentDeltaY * -1 + "px, 0)",
          transition: "none"
        };
      };
      return React6.createElement(
        React6.Fragment,
        null,
        React6.createElement(react_transition_group_1.Transition, { appear: true, in: isVisible, timeout: { appear: 0, enter: 0, exit: duration }, unmountOnExit, mountOnEnter, nodeRef }, function(state) {
          return React6.createElement(
            "div",
            { ref: nodeRef },
            React6.createElement("div", { onClick: onClose, className: clsx_1.default(className && className + "__backdrop", classNames.backdrop), style: styles_1.BackdropStyles[state] }),
            React6.createElement(
              "div",
              { className: clsx_1.default(className, classNames.drawer), style: __assign(__assign({}, styles_1.TransitionStyles[state]), getTransforms()) },
              React6.createElement(
                "div",
                __assign({}, swipeHandlers, { className: clsx_1.default(className && className + "__handle-wrapper", classNames.handleWrapper) }),
                React6.createElement("div", { className: clsx_1.default(className && className + "__handle", classNames.handle) })
              ),
              React6.createElement("div", { className: clsx_1.default(className && className + "__content", classNames.contentWrapper) }, children2)
            )
          );
        })
      );
    };
    exports.default = SlideUpTransition;
  }
});
export default require_dist();
//# sourceMappingURL=react-bottom-drawer.js.map

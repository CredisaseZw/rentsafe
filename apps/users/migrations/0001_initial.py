# Generated by Django 4.2.7 on 2025-07-22 15:05

from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        ("contenttypes", "0002_remove_content_type_name"),
        ("clients", "0001_initial"),
        ("accounting", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True,
                        help_text="Required. Unique email address for the user.",
                        max_length=254,
                        null=True,
                        unique=True,
                        verbose_name="email address",
                    ),
                ),
                (
                    "is_verified",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user's account has been verified (e.g., email/phone).",
                    ),
                ),
                (
                    "profile_picture",
                    models.ImageField(
                        blank=True,
                        help_text="Profile picture of the user.",
                        null=True,
                        upload_to="profile_pics/",
                    ),
                ),
                (
                    "last_password_change",
                    models.DateTimeField(
                        blank=True,
                        help_text="Timestamp of the user's last password change.",
                        null=True,
                    ),
                ),
                (
                    "profile_object_id",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="The ID of the associated Individual or Company profile.",
                        null=True,
                    ),
                ),
                (
                    "can_send_email",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether the user is allowed to send emails from the system.",
                    ),
                ),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True,
                        default=django.utils.timezone.now,
                        help_text="The date and time of the user's last login.",
                        null=True,
                        verbose_name="last login",
                    ),
                ),
                (
                    "client",
                    models.ForeignKey(
                        blank=True,
                        help_text="The client (Individual or Company) this user belongs to.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="users",
                        to="clients.client",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "profile_content_type",
                    models.ForeignKey(
                        blank=True,
                        help_text="The content type of the associated Individual or Company profile.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="user_profiles",
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            options={
                "verbose_name": "Custom User",
                "verbose_name_plural": "Custom Users",
                "ordering": [],
                "abstract": False,
                "swappable": "AUTH_USER_MODEL",
            },
        ),
        migrations.CreateModel(
            name="UserSetting",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date_created", models.DateTimeField(auto_now_add=True, null=True)),
                ("date_updated", models.DateTimeField(auto_now=True, null=True)),
                (
                    "dark_mode_enabled",
                    models.BooleanField(
                        default=False,
                        help_text="Enable dark mode for the user interface.",
                    ),
                ),
                (
                    "email_notifications_enabled",
                    models.BooleanField(
                        default=True,
                        help_text="Receive email notifications for system events.",
                    ),
                ),
                (
                    "extra_preferences",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="A JSON field to store miscellaneous user preferences.",
                    ),
                ),
                (
                    "preferred_currency",
                    models.ForeignKey(
                        blank=True,
                        help_text="The user's preferred currency for display and transactions.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="accounting.currency",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        default=None,
                        help_text="The user who last created or modified this record.",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "user setting",
                "verbose_name_plural": "user settings",
            },
        ),
        migrations.CreateModel(
            name="Role",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Unique name for the role (e.g., 'Property Manager', 'Tenant User').",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Detailed description of what this role entails.",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this role is currently active and assignable.",
                    ),
                ),
                (
                    "permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions granted to users with this role.",
                        related_name="roles",
                        to="auth.permission",
                    ),
                ),
            ],
            options={
                "verbose_name": "role",
                "verbose_name_plural": "roles",
                "ordering": ["name"],
            },
        ),
        migrations.AddField(
            model_name="customuser",
            name="roles",
            field=models.ManyToManyField(
                blank=True,
                help_text="The specific roles assigned to this user, granting specific permissions.",
                related_name="users",
                to="users.role",
            ),
        ),
        migrations.AddField(
            model_name="customuser",
            name="user_permissions",
            field=models.ManyToManyField(
                blank=True,
                help_text="Specific permissions for this user.",
                related_name="user_set",
                related_query_name="user",
                to="auth.permission",
                verbose_name="user permissions",
            ),
        ),
    ]
